..  Copyright (c) 2015, OLogN Technologies AG. All rights reserved.
    Redistribution and use of this file in source (.rst) and compiled
    (.html, .pdf, etc.) forms, with or without modification, are permitted
    provided that the following conditions are met:
        * Redistributions in source form must retain the above copyright
          notice, this list of conditions and the following disclaimer.
        * Redistributions in compiled form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.
        * Neither the name of the OLogN Technologies AG nor the names of its
          contributors may be used to endorse or promote products derived from
          this software without specific prior written permission.
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL OLogN Technologies AG BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
    DAMAGE

.. _sasp:

SmartAnthill Security Protocol (SASP)
=====================================

:Version:   v0.1a

*NB: this document relies on certain terms and concepts introduced in*
:ref:`saoverarch` *and*
:ref:`saprotostack` *documents, please make sure to read them before proceeding.*

SASP (SmartAnthill Security Protocol) aims to provide security guarantees for communications within SmartAnthill environments, in particular, prevention from unauthorized access to message content, message integrity guarantees, and protection from replay attacks.

.. contents::

1. Main notions and definitions
-------------------------------

1.1. **Packet**. A unit of data exchange with other levels/protocols. For the sake of clarity two types of packets are distinguished:

     * **HLP packet**: a packet that is sent to or received from a high level protocol;
     * **UP packet**:  a packet that is sent to or received from an underlying protocol. HLP packet data is a payload data of UP protocol as it will be discussed in more details below.
     * **Internally valid UP packet**: a packet that has passed authentication based solely on packet data (see also packet-based authentication).

1.2. **UP Packet structure**

  * **header**: a non-encrypted part of the packet that contains, in particular, flags and bits of packet nonce.
  * **security tag**: data related to encryption and authentication process
  * **(encrypted) payload data**.

1.3. **Packet Full Nonce (PFN)**: all data used as a packet nonce for purposes of encryption/authentication. PFN consists of: 

     * **Nonce Varying Part (Nonce VP)**: a fixed-size bit sequence uniquely generated by a sending device for each new packet;
     * **Destination Flag (DF)**: a bit that indicates whether a packet payload data is intended solely to SASP itself (such as a packet with Error "Old Nonce" Message), or for its higher level protocol.
     * **Side-Distinguishing Flag (SDF)**: a bit that is set to 0 for one side of communication and to 1 for another side.

1.4. **Nonce Lower Watermark (NLW)**: a value supported by a packet receiving side that is used to determine whether a value of Packet Nonce VP (i) has never been used before (if a new packet is received); (ii) has been used with the last received packet (for instance, in case of packet resending); or (iii) a de-synchronization in communication happened.

1.5. **Nonce to use For Sending (NFS)**: a value supported by a packet sending side that is used to generate a value of Packet Nonce VP that would have never been used before, and that would be verifiable by the other side of communication.

1.6. **Last Received Packet Signature**: [+++check whether it is indeed required]

1.7. **Packet validation process**: a core task of SASP main purpose of which is to ensure that a packet is actually received is from an intended communication partner, is not modified by a third party on the way, and its content (unless specified otherwise) is protected from reading by not indented parties. On the sending side of communication the packet validation process results in encryption and adding authentication data. On receiving side a process can logically be divided into two steps:

  * **packet-based authentication**, which is done using solely packet data such as respective headers, nonces, tags, etc, and not using NLW;
  * **in-sequence authentication**, which is based on comparison of a packet nonce Varying Part with the Nonce Lower Watermark.

1.8. **Error "Old Nonce" Message**: a packet that represents an "old nonce" error report with the lowest possible value of a valid nonce VP (which is equal to a current value of Nonce Lower Watermark plus 1). This packet can be sent, if an otherwise valid packet is received with an "old" nonce VP, that is, with a nonce VP that is less than the Nonce Lower Watermark.



2. Security procedures choices
------------------------------

The core of SASP is packet encryption/decryption and authentication. These processes are based on  EAX algorithm (see [EAX]). Design choices with respect the above-mentioned algorithm are:

  * Encryption method: AES-256
  * Tag size: 128 bit
  * Nonce size: 49 bit, in particular:
     * Nonce Varying Part: 47 bit
     * Destination Flag: 1 bit
     * Side-Distinguishing Flag: 1 bit
  * Header size: 48 bit, in particular:
     * Nonce Varying Part: 47 bit
     * Destination Flag: 1 bit

To reduce the amount of data transferred, Side-Distinguishing Flag is not actually transferred but just appended to the packet header that actually contains only Nonce Varying Part and Destination Flag to get a Packet Full Nonce.

In order to use the same encryption key in both directions of communication each nonce should be unique for packets going in both directions, too. Uniqueness of the nonce going in a particular direction is enforced by packet sender (using nonce VP generation based on NFS). To separates sets of nonces generated by each side of communication, a separate bit in the nonce value (Side-Distinguishing Flag) is used to distinguish between sides so that this bit is set for all nonces generated by one side and is not set for nonces generated by the other side. Which side should have this bit set can be determined, in particular, during set up of communication between two specific devices (for instance, together with encryption key exchange), or can be a predefined choice for some types of the devices, if devices of different type participate in communication (for instance, in communication of a Master device with a Slave device Master device always has the flag set, and Slave device does not have).


3. Scenarios
------------

3.1. Normal processing of a packet
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Two devices, A and B, participate in packet exchange. Each packet sent is encrypted and authenticated in a way to both guarantee packet integrity and protect from replay attacks. Each packet received has a respective authentication data. Correspondingly, when a HLP packet is being prepared for sending, it is encrypted by an encryption key known to both sides of communication, and authentication data is added. It is important that a nonce used for encryption/authentication could be recognized as such (that is, as a value actually used once) by the other side of communication. This is achieved by using Nonce to use For Sending (NFS) on the sending side and Nonce Lower Watermark (NLW) on receiving side.

3.1.1. How NFS / NLW pair works
'''''''''''''''''''''''''''''''

To avoid replay attacks nonces are commonly used to distinguish between an original message and a message with otherwise the same content that is being replayed. A problem with nonces is to check that a particular value is actually new and has not yet been used ever before. To address this problem SASP treats VP of nonces as numerical values and compares a nonce VP from a received packet with a current value of the NLW. If the value of nonce VP is greater than a current value of the NLW, the nonce is considered as new; in this case the value of NLW is set to the value of the nonce VP, and its reuse becomes impossible.

To be economical with the set of values that are greater than a current value of NLW (within a certain range), it is desired that a value of a new nonce VP received be as close (from above) to NLW as possible, ideally, greater by 1. NFS is used to solve this problem. Initially communication partners set NLW on receiving side to the same value as NFS on sending side (for instance, NLW = 0, and NFS = 0). Before a new packet is being sent, NFS is incremented, and packet nonce VP is set to a value of NFS. On the receiving side, upon reception of the packet, the value of NLW will become the value of the nonce VP, that is, again equal to NFS on the sending side. The process may be continued until all space of NFS/NLW values is exhausted.

3.2. Getting a repeated Packet
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In some cases it may be desired to repeat resending the same packet. For instance, it may be detected that a packet has not been received on the other side of communication. In this case the packet is sent with the same nonce as the original packet. On the receiving side the nonce VP is found to be equal to NLW (since NLW was set to the value of nonce VP of the original packet). SASP detects this special case, and, if the packet is otherwise valid, reports that the packet is repeated to the higher level protocol while passing the packet for further processing.

3.3. Getting a packet with an obsolete nonce
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If a packet is internally valid, but its nonce VP is less than a current value of NLW, it may indicate that the communication is de-synchronized (and not necessarily that a third party attack is detected). In this case to resynchronize communication process an Error "Old Nonce" Message is formed with the lowest possible nonce VP is formed, and a packet with this message is sent to a communication partner.

If an Error "Old Nonce" Message is received, the receiving party compares its NFS with the lowest possible value of the nonce within the message, and if NFS is less that value, NFS is set to the value as specified in the message; using such a value of NFS for sending packets will ensure that the packet will pass NLW test at the receiving party.




4. SASP data
------------

SASP is a stateless protocol. For its operations SASP uses the following data:

- Nonce Lower Watermark (NLW)
- Nonce to use For Sending (NFS)
- Last Received Packet Signature (LRPS)


5. Events
---------

There are three events that SASP process: (1) getting a packet from an underlying protocol (UP packet), (2) getting a packet  from a higher level protocol (HLP packet) as New, and (3) getting a packet  from a higher level protocol (HLP packet) to be Resent.

5.1. Receiving an HLP packet as New
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A packet from a higher level protocol is received with a status "new". After this packet is encrypted and authentication data is added using a new nonce, a resulting UP packet is to be passed to the underlying protocol for further transmission to ultimately the communication partner.

5.2. Receiving an HLP packet as Repeated
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A packet from a higher level protocol is received with a status "repeated". A respective UP protocol is to be formed and sent with a nonce used for the last sent packet. It is a responsibility of the higher level protocol [+++check!!!] that the HLP packet is the same as the last sent.

5.3. Receiving a UP packet
^^^^^^^^^^^^^^^^^^^^^^^^^^

A packet from an underlying protocol is received. A packet can be:
  * valid new packet, which means that the packet data passed validation process, and packet nonce VP is greater than the Nonce Lower Watermark;
  * valid repeated packet, a copy of the last received packet;
  * old-nonce packet, an otherwise valid packet with a nonce VP less than the Nonce Lower Watermark, which means de-synchronization in communication;
  * packet with Error "Old Nonce" Message (intended for SASP itself)
  * invalid packet, in particular, corrupted, an attacker's packet, etc.




6. Event processing
-------------------

To process events the protocol should be in either "idle" state Details of processing are placed below.

6.1. Receiving an HLP packet as New
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

NFS is incremented. HLP packet is encrypted and authenticated using current value of NFS to form a UP packet. UP packet is passed to the underlying protocol.

6.2. Receiving an HLP packet as Repeated
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

HLP packet is encrypted and authenticated using current value of NFS, that is, with a value that has been used while the original packet was sent. Resulting UP packet is passed to the underlying protocol.

6.3. Receiving a UP packet
^^^^^^^^^^^^^^^^^^^^^^^^^^

A packet-based authentication is performed.

  * packet-based authentication fails: the packet is silently dropped as being either corrupted or an attacker's packet;
  * packet-based authentication is passed: it can be either an error message packet directed to SASP itself, or a "regular" packet with payload intended for a higher level protocol.

     * a packet is with Error Old Nonce Message [+++structure and detection]: packet nonce VP is not compared to NLW (reason: replay attack is impossible since NFS cannot be decreased as a result of this message); a value of the lowest possible valid nonce from the packet is compared to the current value of NFS.

         * NFS is less than the value of the lowest possible valid nonce: NFS is set to the value of the lowest possible valid nonce.
         * NFS is greater than or equal to the value of the lowest possible valid nonce: no changes to NFS is done; the packet is ignored.

     * packets other than Error Old Nonce Message: packet nonce VP is compared to the Nonce Lower Watermark (NLW). Three cases are possible:

        * nonce VP is less than NLW: a packet with Error Old Nonce Message is prepared with the lowest possible valid nonce set to a current value of NLW; the packet is authenticated and passed to the underlying protocol.
        * nonce VP is equal to NLW: a repeated packet is received: packet signature is compared to LRPS.

            *  packet signature is not equal to LRPS: a potential for an attacker's packet; the packet is silently dropped;
            *  packet signature is equal to LRPS: an HLP packet with payload of the received packet is passed to the higher level protocol with status "repeated"

        * nonce VP is greater than NLW: a new packet is received: NLW is set to the value of nonce VP of the received packet; LRPS is set to packet signature; an HLP packet with payload of the received packet is passed to the higher level protocol with status "new".



7. Implementation notes
-----------------------

When a packet with status "new" is received, it is important that an updated value of NLW be saved permanently before further message processing (and definitely, before responding to the message) to avoid using an obsolete value of NLW in case of restore from backup (and thus to avoid a potential for replay attacks). It should be noted that NFS does not require to be stored permanently, since if NFS becomes obsolete, it can be fixed by means of Error "Old Nonce" Message.



References
----------

[EAX] "The EAX Mode of Operation", http://www.cs.ucdavis.edu/~rogaway/papers/eax.pdf

____________________________________

+++ restore from backup

... [work in progress]

Note: If 47 bit nonce VP is used, then different nonces will be enough for 10 years with packet frequency of 2.25 mks:
10*365*24*60*60*1000000/2^47 = 2.25
